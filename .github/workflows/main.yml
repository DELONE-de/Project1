name: CI/CD Deployment

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend
          file: ./Backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}

      - name: Build and Push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Azure VM and Configure
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            name="mySSHVM"
            resource_group="MyResourceGroup"
            location="eastus"
            image="Ubuntu2404"
            size="Standard_D2s_v3"
            admin_username="azureuser"
            
              az vm create \
                --resource-group "$resource_group" \
                --name "$name" \
                --image "$image" \
                --size "$size" \
                --admin-username "$admin_username" \
                --ssh-key-values "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDD1Cbb3BHaqGHYHsEEenWaKOou0exeqmnOpjow15yEUSRnw7yaJRpOoPyuYR4w1HuJnXCJG0jPb0BA9t3AOfQBNY9yte2N9prgYFdySS1TLSkqM9s+bC1XQ095ouHJq29HLP/4U/udPklMpNuO72wEvl2BNHj4jB4p/hs0+5VMYJRSrAnpJRoT/vbPnzcoxwMtTLEVOnyruEB1DY8y4H9w1zUkgdHiAg6fnxqn0uZwou+m9eE8nqEy9Nm5YXJC/boXqK3F3O0YkdAaIa0KZeO/aiZZe2JM02s7+LtE18DIlp48+jkU0quT4lyDwqMcmw4DR5c85zglTua1GBOgiVn9convenati@gmail.com" \
                --public-ip-sku Standard
            
            PUBLIC_IP=$(az vm show \
              --resource-group "$resource_group" \
              --name "$name" \
            
            if [ -z "$PUBLIC_IP" ]; then
              echo "Failed to get public IP"
            fi
            
            echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
            
            echo "Configuring network ports..."
            az network nsg rule create \
              --resource-group "$resource_group" \
              --nsg-name "${name}NSG" \
              --name "AllowPorts" \
              --priority 100 \
              --destination-port-ranges 22 80 5000

      - name: Deploy to VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.PUBLIC_IP }}
          username: azureuser
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}
            
            # Setup app directory
            mkdir -p /app
            cd /app
            
            # Stop existing containers
            docker compose down || true
            
            # Start new containers with health check
            docker compose up -d
            
            # Wait for services to be healthy
            timeout 60s bash -c 'until docker compose ps | grep -q "(healthy)"; do sleep 2; done'
